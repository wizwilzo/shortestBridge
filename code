import java.util.*;

class Solution {
    private int[][] matrix;
    private boolean[][] vis;
    private Queue<int[]> q = new LinkedList();
    public int solve(int[][] matrix) {
        this.matrix=matrix;
        vis = new boolean[matrix.length][matrix[0].length];
        for (int i = 0; i < matrix.length; i++) {
            boolean gtfo = false;
            for (int j = 0; j < matrix[0].length; j++) {
                if (matrix[i][j] == 1) {
                    gtfo = true;
                    fill(matrix, i, j);    
                    break;
                }
            }
            if (gtfo) break;
        }
        Set<String> set = new HashSet();
        int ret = 0;
        while (!q.isEmpty()) {
            int size = q.size();
            for (int x = 0; x < size; x++) {
                int[] temp = q.poll();
                int a = temp[0];
                int b = temp[1];
                if (a == -1 || b == -1 || a == matrix.length || b == matrix[0].length || matrix[a][b] == 2 || set.contains(a + " " + b)) {
                    continue;
                }
                if (matrix[a][b] == 1) {
                    return ret;
                }
                set.add(a + " " + b);
                q.offer(new int[]{a+1, b});
                q.offer(new int[]{a-1, b});
                q.offer(new int[]{a, b+1});
                q.offer(new int[]{a, b-1});
            }
            ret++;
        }
        return 2414;
    }
    public void fill(int[][] matrix, int i, int j) {
        if (i == -1 || j == -1 || i == matrix.length || j == matrix[0].length || vis[i][j] || matrix[i][j] == 0) {
            return;
        }
        vis[i][j] = true;
        matrix[i][j] = 2;
        if (j != 0 && matrix[i][j-1] == 0) {
            q.offer(new int[]{i+1, j});
            q.offer(new int[]{i-1, j});
            q.offer(new int[]{i, j+1});
            q.offer(new int[]{i, j-1});
        }
        else if (i != 0 && matrix[i-1][j] == 0) {
            q.offer(new int[]{i+1, j});
            q.offer(new int[]{i-1, j});
            q.offer(new int[]{i, j+1});
            q.offer(new int[]{i, j-1});
        }
        else if (i != matrix.length-1 && matrix[i+1][j] == 0) {
            q.offer(new int[]{i+1, j});
            q.offer(new int[]{i-1, j});
            q.offer(new int[]{i, j+1});
            q.offer(new int[]{i, j-1});
        }
        else if (j != matrix[0].length-1 && matrix[i][j+1] == 0) {
            q.offer(new int[]{i+1, j});
            q.offer(new int[]{i-1, j});
            q.offer(new int[]{i, j+1});
            q.offer(new int[]{i, j-1});
        }
        fill(matrix, i+1, j);
        fill(matrix, i-1, j);
        fill(matrix, i, j+1);
        fill(matrix, i, j-1);
    }
}
